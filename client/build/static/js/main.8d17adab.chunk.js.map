{"version":3,"sources":["utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Cart.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js","assets/spinner.gif"],"names":["reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","console","log","useStoreContext","useContext","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","image","name","price","className","to","alt","src","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","i","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Cart","loadStripe","toggleCart","a","getCart","sum","toFixed","calculateTotal","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","Auth","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","loggedIn","href","logout","stripePromise","CartPage","useLazyQuery","getCheckout","res","redirectToCheckout","sessionId","checkout","session","productIds","push","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"6SAeaA,EAAU,SAACC,EAAOC,GAC3B,OAAQA,EAAOC,MAEX,ICjBuB,kBDkBnB,OAAO,2BACAF,GADP,IAEIG,SAAS,YAAKF,EAAOE,YAG7B,ICtByB,oBDuBrB,OAAO,2BACAH,GADP,IAEII,WAAW,YAAKH,EAAOG,cAG/B,IC3B+B,0BD4B3B,OAAO,2BACAJ,GADP,IAEIK,gBAAiBJ,EAAOI,kBAGhC,IC5BmB,cD6Bf,OAAO,2BACAL,GADP,IAEIM,UAAU,EACVC,KAAK,GAAD,mBAAMP,EAAMO,MAAZ,CAAkBN,EAAOO,YAGrC,IClC4B,uBDmCxB,OAAO,2BACAR,GADP,IAEIO,KAAK,GAAD,mBAAMP,EAAMO,MAAZ,YAAqBN,EAAOE,aAGxC,ICvCwB,mBDwCpB,IAAIM,EAAWT,EAAMO,KAAKG,QAAO,SAAAF,GAC7B,OAAOA,EAAQG,MAAQV,EAAOU,OAGlC,OAAO,2BACAX,GADP,IAEIM,SAAUG,EAASG,OAAS,EAC5BL,KAAME,IAGd,ICjD4B,uBDkDxB,OAAO,2BACAT,GADP,IAEIM,UAAU,EACVC,KAAMP,EAAMO,KAAKM,KAAI,SAAAL,GAIjB,OAHIP,EAAOU,MAAQH,EAAQG,MACvBH,EAAQM,iBAAmBb,EAAOa,kBAE/BN,OAInB,IC5DkB,aD6Dd,OAAO,2BACAR,GADP,IAEIM,UAAU,EACVC,KAAM,KAGd,IClEmB,cDmEf,OAAO,2BACAP,GADP,IAEIM,UAAWN,EAAMM,WAGzB,QACI,OAAON,I,gBEnFbe,EAAeC,0BACbC,EAAaF,EAAbE,SAEFC,EAAgB,SAAC,GAA6B,EAA3BC,MAA4B,IFqFnBC,EErFMC,EAAY,iBAChD,GFoF8BD,EEpFc,CACxCjB,SAAU,GACVI,KAAM,GACND,UAAU,EACVF,WAAY,GACZC,gBAAiB,IFgFdiB,qBAAWvB,EAASqB,IErF3B,mBAAOpB,EAAP,KAAcuB,EAAd,KASA,OADAC,QAAQC,IAAIzB,GACL,kBAACiB,EAAD,eAAUE,MAAO,CAACnB,EAAOuB,IAAeF,KAG7CK,EAAkB,WACpB,OAAOC,qBAAWZ,ICZf,SAASa,EAAWC,EAAWC,EAAQC,GAC5C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAGIC,EAAIC,EAAIC,EAHNC,EAAUC,OAAOC,UAAUC,KAAK,kBAAmB,GAMzDH,EAAQI,gBAAkB,SAAUC,GAClC,IAAMR,EAAKG,EAAQM,OAEnBT,EAAGU,kBAAkB,WAAY,CAAEC,QAAS,QAC5CX,EAAGU,kBAAkB,aAAc,CAAEC,QAAS,QAC9CX,EAAGU,kBAAkB,OAAQ,CAAEC,QAAS,SAI1CR,EAAQS,QAAU,SAAUJ,GAC1BnB,QAAQC,IAAI,uBAIda,EAAQU,UAAY,SAAUL,GAa5B,OAXAR,EAAKG,EAAQM,OAEbR,EAAKD,EAAGc,YAAYpB,EAAW,aAE/BQ,EAAQD,EAAGc,YAAYrB,GAGvBM,EAAGY,QAAU,SAAUJ,GACrBnB,QAAQC,IAAI,QAASkB,IAGfb,GACN,IAAK,MACHO,EAAMc,IAAIpB,GACVE,EAAQF,GACR,MACF,IAAK,MACH,IAAMqB,EAAMf,EAAMgB,SAClBD,EAAIJ,UAAY,WACdf,EAAQmB,EAAIR,SAEd,MACF,IAAK,SACHP,EAAMiB,OAAOvB,EAAOpB,KACpB,MACF,QACEa,QAAQC,IAAI,mBAKhBW,EAAGmB,WAAa,WACdpB,EAAGqB,aCJIC,I,UAAAA,EAnDf,SAAqBC,GACnB,IACEC,EAIED,EAJFC,MACAC,EAGEF,EAHFE,KACAjD,EAEE+C,EAFF/C,IACAkD,EACEH,EADFG,MAGF,EAA0BnC,IAA1B,mBAAO1B,EAAP,KAAcuB,EAAd,KAEQhB,EAASP,EAATO,KAuBR,OACE,yBAAKuD,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAE,oBAAepD,IACrB,yBACEqD,IAAKJ,EACLK,IAAG,kBAAaN,KAElB,2BAAIC,IAEN,6BACE,8BACA,kCAAQC,IAEV,4BAAQK,QAlCM,WAChB,IAAMC,EAAa5D,EAAK6D,MAAK,SAACC,GAAD,OAAcA,EAAS1D,MAAQA,KACxDwD,GACF5C,EAAS,CACPrB,KHf4B,uBGgB5BS,IAAKA,EACLG,iBAAkBwD,SAASH,EAAWrD,kBAAoB,IAE5Dc,EAAW,OAAQ,MAAT,YAAC,eACNuC,GADK,IAERrD,iBAAkBwD,SAASH,EAAWrD,kBAAoB,OAG5DS,EAAS,CACPrB,KH5BmB,cG6BnBM,QAAQ,2BAAMkD,GAAP,IAAa5C,iBAAkB,MAExCc,EAAW,OAAQ,MAAT,YAAC,eAAoB8B,GAArB,IAA2B5C,iBAAkB,QAiBvD,iB,QCtDOyD,EAAiBC,cAAH,+NA6BdC,GAdqBD,cAAH,6JAcCA,cAAH,uFAShBE,EAAaF,cAAH,6QAoBVG,EAAiBH,cAAH,qI,iBCuBZI,MAtEf,WAEE,MAA0BlD,IAA1B,mBAAO1B,EAAP,KAAcuB,EAAd,KAEQlB,EAAoBL,EAApBK,gBAER,EAA0BwE,mBAASN,GAA3BO,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAwCjB,OAtCAC,qBAAU,WACJD,GACFxD,EAAS,CACPrB,KLvBuB,kBKwBvBC,SAAU4E,EAAK5E,WAGjB4E,EAAK5E,SAAS8E,SAAQ,SAACzE,GACrBoB,EAAW,WAAY,MAAOpB,OAGtBsE,GAEVlD,EAAW,WAAY,OAAOsD,MAAK,SAAC/E,GAElCoB,EAAS,CACPrB,KLpCqB,kBKqCrBC,SAAUA,SAIf,CAAC4E,EAAMD,EAASvD,IAkBjB,yBAAKuC,UAAU,QACb,6CACC9D,EAAMG,SAASS,OACd,yBAAKkD,UAAU,aAlBdzD,EAIEL,EAAMG,SAASO,QAAO,SAAAF,GAC3B,IAAK,IAAI2E,EAAI,EAAGA,EAAI3E,EAAQ4E,SAASxE,OAAQuE,IAC3C,GAAI3E,EAAQ4E,SAASD,GAAGxE,MAAQN,EAC9B,OAAO,EAGX,OAAO,KATAL,EAAMG,UAkBSU,KAAI,SAACL,GAAD,OACpB,kBAAC,EAAD,CACE6E,IAAK7E,EAAQG,IACbA,IAAKH,EAAQG,IACbgD,MAAOnD,EAAQmD,MACfC,KAAMpD,EAAQoD,KACdC,MAAOrD,EAAQqD,YAMrB,mEAEDiB,EAAU,yBAAKb,IAAKqB,IAAStB,IAAI,YAAe,OChBxCuB,MApDf,WAEE,MAA0B7D,IAA1B,mBAAO1B,EAAP,KAAcuB,EAAd,KAEQnB,EAAeJ,EAAfI,WAGR,EAAwCyE,mBAASJ,GAAzCK,EAAR,EAAQA,QAAeU,EAAvB,EAAiBT,KA4BjB,OA1BAC,qBAAU,WACJQ,GACFjE,EAAS,CACPrB,KNpByB,oBMqBzBE,WAAYoF,EAAapF,aAE3BoF,EAAapF,WAAW6E,SAAQ,SAAAG,GAC9BxD,EAAW,aAAc,MAAOwD,OAExBN,GACVlD,EAAW,aAAc,OAAOsD,MAAK,SAAA9E,GACnCmB,EAAS,CACPrB,KN7BuB,oBM8BvBE,WAAYA,SAIjB,CAACoF,EAAcV,EAASvD,IAUzB,6BACE,kDACCnB,EAAWS,KAAI,SAAA6C,GAAI,OAClB,4BACE2B,IAAK3B,EAAK/C,IACVuD,QAAS,WAbG,IAAAuB,IAcE/B,EAAK/C,IAbzBY,EAAS,CACPrB,KNrCiC,0BMsCjCG,gBAAiBoF,MAcZ/B,EAAKE,W,yBCeD8B,EAhEE,SAAC,GAAc,IAAZhC,EAAW,EAAXA,KAElB,EAAqBhC,IAAZH,EAAT,oBA+BA,OACE,yBAAKuC,UAAU,YACb,6BACE,yBACEG,IAAG,kBAAaP,EAAKC,OACrBK,IAAI,MAGR,6BACE,6BAAMN,EAAKE,KAAX,MAAoBF,EAAKG,OACzB,6BACE,sCACA,2BACE3D,KAAK,SACLyF,YAAY,IACZxE,MAAOuC,EAAK5C,iBACZ8E,SArCO,SAACjD,GAChB,IAAMxB,EAAQwB,EAAEkD,OAAO1E,MAET,MAAVA,GACFI,EAAS,CACPrB,KPbwB,mBOcxBS,IAAK+C,EAAK/C,MAGZiB,EAAW,OAAQ,SAAT,eAAwB8B,MAElCnC,EAAS,CACPrB,KPnB4B,uBOoB5BS,IAAK+C,EAAK/C,IACVG,iBAAkBwD,SAASnD,KAG7BS,EAAW,OAAQ,MAAT,YAAC,eAAoB8B,GAArB,IAA2B5C,iBAAkBwD,SAASnD,UAsB5D,0BACE2E,KAAK,MACLC,aAAW,QACX7B,QAAS,kBAlDI,SAAAR,GACrBnC,EAAS,CACPrB,KPF0B,mBOG1BS,IAAK+C,EAAK/C,MAEZiB,EAAW,OAAQ,SAAT,eAAwB8B,IA6CXsC,CAAetC,KAHhC,0B,iCCbK,M,0FAzCb,WACE,OAAOuC,IAAOC,KAAKC,c,sBAGrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAGzC,SAAeA,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjCrE,OAAOuE,SAASC,OAAO,O,oBAGzB,WAEEL,aAAaM,WAAW,YAExBzE,OAAOuE,SAASC,OAAO,S,sBC0CZE,GApEOC,YAAW,oCAEpB,WAET,MAA0BxF,IAA1B,mBAAO1B,EAAP,KAAcuB,EAAd,KAEA,SAAS4F,IACL5F,EAAS,CAAErB,KTRQ,gBS+BvB,OAZA8E,qBAAU,WAAM,4CACZ,4BAAAoC,EAAA,sEACuBxF,EAAW,OAAQ,OAD1C,OACUrB,EADV,OAEIgB,EAAS,CAAErB,KT1Ba,uBS0BeC,SAAS,YAAKI,KAFzD,4CADY,sBAMPP,EAAMO,KAAKK,QANH,WAAD,wBAORyG,KAEL,CAACrH,EAAMO,KAAKK,OAAQW,IAGlBvB,EAAMM,SAUP,yBAAKwD,UAAU,QACX,yBAAKA,UAAU,QAAQI,QAASiD,GAAhC,SACA,2CACCnH,EAAMO,KAAKK,OACR,6BACKZ,EAAMO,KAAKM,KAAI,SAAA6C,GAAI,OAChB,kBAAC,EAAD,CAAU2B,IAAK3B,EAAK/C,IAAK+C,KAAMA,OAEnC,yBAAKI,UAAU,0BACX,2CAvCpB,WACI,IAAIwD,EAAM,EAIV,OAHAtH,EAAMO,KAAK0E,SAAQ,SAAAvB,GACf4D,GAAO5D,EAAKG,MAAQH,EAAK5C,oBAEtBwG,EAAIC,QAAQ,GAkCcC,IACjB,kBAAC,IAAD,CAAMzD,GAAG,SACL,+CAOZ,4BACI,0BAAM+B,KAAK,MAAMC,aAAW,WAA5B,gBADJ,0CA1BJ,yBAAKjC,UAAU,cAAcI,QAASiD,GAClC,0BACIrB,KAAK,MACLC,aAAW,SAFf,mBChCD0B,EAVF,WACX,OACE,yBAAK3D,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCiHS4D,MAvGf,WAEE,MAA0BhG,IAA1B,mBAAO1B,EAAP,KAAcuB,EAAd,KACQkE,EAAOkC,cAAPlC,GAER,EAA4CmC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEA,EAA0BjD,mBAASN,GAA3BO,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAET5E,EAAmBH,EAAnBG,SAAUI,EAASP,EAATO,KA+DlB,OA7DAyE,qBAAU,WAEJ7E,EAASS,OACXkH,EAAkB3H,EAASiE,MAAK,SAAA5D,GAAO,OAAIA,EAAQG,MAAQ8E,MAGpDV,GACPxD,EAAS,CACPrB,KXtCuB,kBWuCvBC,SAAU4E,EAAK5E,WAGjB4E,EAAK5E,SAAS8E,SAAQ,SAACzE,GACrBoB,EAAW,WAAY,MAAOpB,OAIxBsE,GACRlD,EAAW,WAAY,OAAOsD,MAAK,SAAC6C,GAClCxG,EAAS,CACPrB,KXlDqB,kBWmDrBC,SAAU4H,SAIf,CAAC5H,EAAU4E,EAAMD,EAASvD,EAAUkE,IAqCrC,oCACGoC,EACC,yBAAK/D,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,2BAEA,4BAAK8D,EAAejE,MAEpB,2BAAIiE,EAAeG,aAEnB,2BACE,0CADF,IAC2BH,EAAehE,MAAO,IAC/C,4BAAQK,QA9CA,WAChB,IAAMC,EAAa5D,EAAK6D,MAAK,SAACC,GAAD,OAAcA,EAAS1D,MAAQ8E,KAExDtB,GACF5C,EAAS,CACPrB,KXpD4B,uBWqD5BS,IAAK8E,EACL3E,iBAAkBwD,SAASH,EAAWrD,kBAAoB,IAG5Dc,EAAW,OAAQ,MAAT,YAAC,eACNuC,GADK,IAERrD,iBAAkBwD,SAASH,EAAWrD,kBAAoB,OAG5DS,EAAS,CACPrB,KXlEmB,cWmEnBM,QAAQ,2BAAMqH,GAAP,IAAuB/G,iBAAkB,MAGlDc,EAAW,OAAQ,MAAT,YAAC,eAAoBiG,GAArB,IAAqC/G,iBAAkB,QA0B3D,eACA,4BACEmH,UAAW1H,EAAK6D,MAAK,SAAA8D,GAAC,OAAIA,EAAEvH,MAAQkH,EAAelH,OAAMuD,QAxB9C,WACrB3C,EAAS,CACPrB,KX1E0B,mBW2E1BS,IAAKkH,EAAelH,MAItBiB,EAAW,OAAQ,SAAT,eAAwBiG,MAgB1B,qBAMF,yBACE5D,IAAG,kBAAa4D,EAAelE,OAC/BK,IAAK6D,EAAejE,QAGtB,KACHkB,EAAU,yBAAKb,IAAKqB,IAAStB,IAAI,YAAe,KACjD,kBAAC,EAAD,QC1GSmE,I,MAAAA,EAVf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OACE,yBACEC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,WAEhEL,ICWQM,GAfC,WACd,OACE,6BACE,kBAAC,EAAD,KACE,kDACA,4BACE,0BAAM5C,KAAK,MAAMC,aAAW,gCAA5B,oB,SCPG4C,GAAQnE,cAAH,mMAWLoE,GAAYpE,cAAH,oOAcTqE,GAAWrE,cAAH,kVC2CNsE,OAhEf,SAAezH,GACb,MAAkCuG,mBAAS,CAAEmB,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA2BC,sBAAYR,IAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAAgBA,MAEVC,EAAgB,uCAAG,WAAOC,GAAP,iBAAAnC,EAAA,6DACvBmC,EAAMC,iBADiB,kBAGUJ,EAAM,CACnCK,UAAW,CAAEV,MAAOE,EAAUF,MAAOC,SAAUC,EAAUD,YAJtC,OAGfU,EAHe,OAMftD,EAAQsD,EAAiB3E,KAAKqE,MAAMhD,MAC1CuD,EAAKP,MAAMhD,GAPU,gDASrB5E,QAAQC,IAAR,MATqB,yDAAH,sDAahBmI,EAAe,SAACL,GACpB,MAAwBA,EAAM1D,OAAtBjC,EAAR,EAAQA,KAAMzC,EAAd,EAAcA,MACd+H,EAAa,2BACRD,GADO,mBAETrF,EAAOzC,MAIZ,OACE,yBAAK2C,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,WAAT,uBAEA,qCACA,0BAAM8F,SAAUP,GACd,yBAAKxF,UAAU,+BACb,2BAAOgG,QAAQ,SAAf,kBACA,2BACEnE,YAAY,qBACZ/B,KAAK,QACL1D,KAAK,QACLuF,GAAG,QACHG,SAAUgE,KAGd,yBAAK9F,UAAU,+BACb,2BAAOgG,QAAQ,OAAf,aACA,2BACEnE,YAAY,SACZ/B,KAAK,WACL1D,KAAK,WACLuF,GAAG,MACHG,SAAUgE,KAGbP,EACC,6BACE,uBAAGvF,UAAU,cAAb,2CAEA,KACJ,yBAAKA,UAAU,qBACb,4BAAQ5D,KAAK,UAAb,cCuBK6J,OAhFf,SAAgB1I,GACd,MAAkCuG,mBAAS,CAAEmB,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkBC,sBAAYN,IAAvBmB,EAAP,oBAEMV,EAAgB,uCAAG,WAAOC,GAAP,iBAAAnC,EAAA,6DACvBmC,EAAMC,iBADiB,SAEQQ,EAAQ,CACrCP,UAAW,CACTV,MAAOE,EAAUF,MACjBC,SAAUC,EAAUD,SACpBiB,UAAWhB,EAAUgB,UACrBC,SAAUjB,EAAUiB,YAPD,OAEjBR,EAFiB,OAUjBtD,EAAQsD,EAAiB3E,KAAKiF,QAAQ5D,MAC5CuD,EAAKP,MAAMhD,GAXY,2CAAH,sDAchBwD,EAAe,SAACL,GACpB,MAAwBA,EAAM1D,OAAtBjC,EAAR,EAAQA,KAAMzC,EAAd,EAAcA,MACd+H,EAAa,2BACRD,GADO,mBAETrF,EAAOzC,MAIZ,OACE,yBAAK2C,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,UAAT,sBAEA,sCACA,0BAAM8F,SAAUP,GACd,yBAAKxF,UAAU,+BACb,2BAAOgG,QAAQ,aAAf,eACA,2BACEnE,YAAY,QACZ/B,KAAK,YACL1D,KAAK,YACLuF,GAAG,YACHG,SAAUgE,KAGd,yBAAK9F,UAAU,+BACb,2BAAOgG,QAAQ,YAAf,cACA,2BACEnE,YAAY,OACZ/B,KAAK,WACL1D,KAAK,WACLuF,GAAG,WACHG,SAAUgE,KAGd,yBAAK9F,UAAU,+BACb,2BAAOgG,QAAQ,SAAf,UACA,2BACEnE,YAAY,qBACZ/B,KAAK,QACL1D,KAAK,QACLuF,GAAG,QACHG,SAAUgE,KAGd,yBAAK9F,UAAU,+BACb,2BAAOgG,QAAQ,OAAf,aACA,2BACEnE,YAAY,SACZ/B,KAAK,WACL1D,KAAK,WACLuF,GAAG,MACHG,SAAUgE,KAGd,yBAAK9F,UAAU,qBACb,4BAAQ5D,KAAK,UAAb,cCZKiK,OA/Df,WA+CE,OACE,4BAAQrG,UAAU,iBAChB,4BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,0BAAM+B,KAAK,MAAMC,aAAW,gBAA5B,gBADF,oBAMF,6BArDE4D,EAAKS,WAEL,wBAAItG,UAAU,YACZ,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,aAIF,wBAAID,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,iBAAT,kBAIF,wBAAID,UAAU,QAEZ,uBAAGuG,KAAK,IAAInG,QAAS,kBAAMyF,EAAKW,WAAhC,YAQJ,wBAAIxG,UAAU,YACZ,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,aAIF,wBAAID,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,WAAT,WAIF,wBAAID,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,UAAT,cC7BNwG,GAAgBrD,YAAW,oCAuFlBsD,GArFE,WAEb,MAA0B9I,IAA1B,mBAAO1B,EAAP,KAAcuB,EAAd,KAEA,EAAgCkJ,uBAAa9F,GAA7C,mBAAO+F,EAAP,KAAsB3F,EAAtB,KAAsBA,KAiDtB,OArBAC,qBAAU,WAAM,4CACZ,4BAAAoC,EAAA,sEACuBxF,EAAW,OAAQ,OAD1C,OACUrB,EADV,OAEIgB,EAAS,CAAErB,KlBzCa,uBkByCeC,SAAS,YAAKI,KAFzD,4CADY,sBAMPP,EAAMO,KAAKK,QANH,WAAD,wBAORyG,KAEL,CAACrH,EAAMO,KAAKK,OAAQW,IAGvByD,qBAAU,WACFD,GACAwF,GAAcrF,MAAK,SAACyF,GAChBA,EAAIC,mBAAmB,CAAEC,UAAW9F,EAAK+F,SAASC,eAG3D,CAAChG,IAIA,yBAAKjB,UAAU,IACX,6CACC9D,EAAMO,KAAKK,OACR,6BACKZ,EAAMO,KAAKM,KAAI,SAAA6C,GAAI,OAChB,kBAAC,EAAD,CAAU2B,IAAK3B,EAAK/C,IAAK+C,KAAMA,OAEnC,yBAAKI,UAAU,0BACX,2CApDpB,WACI,IAAIwD,EAAM,EAIV,OAHAtH,EAAMO,KAAK0E,SAAQ,SAAAvB,GACf4D,GAAO5D,EAAKG,MAAQH,EAAK5C,oBAEtBwG,EAAIC,QAAQ,GA+CcC,IAEbmC,EAAKS,WACD,4BAAQlG,QA/CpC,WACI,IAAM8G,EAAa,GAEnBhL,EAAMO,KAAK0E,SAAQ,SAACvB,GAChB,IAAK,IAAIyB,EAAI,EAAGA,EAAIzB,EAAK5C,iBAAkBqE,IACvC6F,EAAWC,KAAKvH,EAAK/C,QAI7B+J,EAAY,CACRjB,UAAW,CAAEtJ,SAAU6K,OAqCH,YAIA,yDAKhB,4BACI,0BAAMlF,KAAK,MAAMC,aAAW,WAA5B,gBADJ,kDC3CDmF,OAxCf,WACE,MAAmB/B,sBAAYP,IAAxBuC,EAAP,oBAwBA,OAtBAnG,qBAAU,WAAM,4CACd,kCAAAoC,EAAA,sEACqBxF,EAAW,OAAQ,OADxC,UACQrB,EADR,SAEQJ,EAAWI,EAAKM,KAAI,SAAA6C,GAAI,OAAIA,EAAK/C,QAE1BC,OAJf,iCAK2BuK,EAAS,CAAE1B,UAAW,CAAEtJ,cALnD,gBAKY4E,EALZ,EAKYA,KACYA,EAAKoG,SAAShL,SAEtB8E,SAAQ,SAACvB,GACnB9B,EAAW,OAAQ,SAAU8B,MATnC,QAaE0H,YAAW,WACT7I,OAAOuE,SAASC,OAAO,OACtB,KAfL,6CADc,uBAAC,WAAD,wBAmBdsE,KACC,CAACF,IAGF,6BACE,kBAAC,EAAD,KACE,wCACA,4DAGA,8ECaOG,OA7Cf,WACE,IACIC,EADIxG,EAASF,mBAASH,GAAlBK,KAOR,OAJIA,IACFwG,EAAOxG,EAAKwG,MAIZ,oCACE,yBAAKzH,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,2BAECwH,EACC,oCACE,iDACqBA,EAAKtB,UAD1B,IACsCsB,EAAKrB,UAE1CqB,EAAKC,OAAO3K,KAAI,SAAC4K,GAAD,OACf,yBAAKpG,IAAKoG,EAAM9K,IAAKmD,UAAU,QAC7B,4BACG,IAAIyC,KAAKjC,SAASmH,EAAMC,eAAeC,sBAE1C,yBAAK7H,UAAU,YACZ2H,EAAMtL,SAASU,KAAI,WAA8B+K,GAA9B,IAAGjL,EAAH,EAAGA,IAAKgD,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,MAArB,OAClB,yBAAKwB,IAAKuG,EAAO9H,UAAU,kBACzB,kBAAC,IAAD,CAAMC,GAAE,oBAAepD,IACrB,yBAAKqD,IAAKJ,EAAMK,IAAG,kBAAaN,KAChC,2BAAIC,IAEN,6BACE,kCAAQC,cAQpB,QCvBNgI,GAAWC,yBAAe,CAC9BC,IAAK,aAGDC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1B/F,EAAQM,aAAaC,QAAQ,YACnC,MAAO,CACLwF,QAAQ,2BACHA,GADE,IAELC,cAAehG,EAAK,iBAAaA,GAAU,SAK3CiG,GAAS,IAAIC,eAAa,CAC9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,kBA2BEC,OAxBf,WACE,OACE,kBAAC,iBAAD,CAAgBN,OAAQA,IACtB,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,KACE,kBAAC,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWrF,IACjC,kBAAC,IAAD,CAAOmF,OAAK,EAACC,KAAK,SAASC,UAAWhE,KACtC,kBAAC,IAAD,CAAO8D,OAAK,EAACC,KAAK,UAAUC,UAAW/C,KACvC,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,gBAAgBC,UAAWxB,KAC7C,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,gBAAgBC,UAAWpF,IAC7C,kBAAC,IAAD,CAAOkF,OAAK,EAACC,KAAK,WAAWC,UAAW5B,KACxC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,QAAQC,UAAWtC,KACrC,kBAAC,IAAD,CAAOsC,UAAWpE,WC5C1BqE,GAAcC,QACW,cAA7BzK,OAAOuE,SAASmG,UAEa,UAA7B1K,OAAOuE,SAASmG,UAEhB1K,OAAOuE,SAASmG,SAASC,MACvB,2DAyCJ,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlI,MAAK,SAAAuI,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3N,QACfsN,UAAUC,cAAcO,YAI1BtM,QAAQC,IACN,iHAKE4L,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBjM,QAAQC,IAAI,sCAGR4L,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAA5E,GACL7H,QAAQ6H,MAAM,4CAA6CA,MC7FjE6E,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBjB,GACvB,GAEE,kBAAmBC,UAAW,CAI9B,GADkB,IAAIiB,IAAIC,GAAwBjM,OAAOuE,SAASuD,MACpDoE,SAAWlM,OAAOuE,SAAS2H,OAIvC,OAGFlM,OAAOmM,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEPzB,KAgEV,SAAiCK,EAAOC,GAEtCsB,MAAMvB,EAAO,CACXjB,QAAS,CAAE,iBAAkB,YAE5BjH,MAAK,SAAA0J,GAEJ,IAAMC,EAAcD,EAASzC,QAAQ2C,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAM/J,MAAK,SAAAuI,GACjCA,EAAayB,aAAahK,MAAK,WAC7B3C,OAAOuE,SAASqI,eAKpBhC,GAAgBC,EAAOC,MAG1BY,OAAM,WACLzM,QAAQC,IACN,oEAvFA2N,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAM/J,MAAK,WACjC1D,QAAQC,IACN,iHAMJ0L,GAAgBC,EAAOC,OCrC/BE,I,mBChBA8B,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.8d17adab.chunk.js","sourcesContent":["import { useReducer } from 'react';\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products]\n            };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products],\n            };\n\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n\n        default:\n            return state;\n    }\n};\n\n\nexport function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n}\n","\nexport const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n\n\n// cart\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n    const [state, dispatch] = useProductReducer({\n        products: [],\n        cart: [],\n        cartOpen: false,\n        categories: [],\n        currentCategory: ''\n    });\n    // use this to confirm it works!\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n    return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n//indexedDB\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('the-flower-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n\n  });\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\n// indexedDB cart\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price\n  } = item;\n\n  const [state, dispatch] = useStoreContext();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div></div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\n// indexedDB\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => {\n      for (let i = 0; i < product.category.length; i++) {\n        if (product.category[i]._id === currentCategory) {\n          return true;\n        }\n      }\n      return false;\n    });\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\n// indexedDB\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  // added \"loading\" for indexedDB\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n\n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { Link } from \"react-router-dom\";\nimport React, { useEffect } from \"react\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\nimport { useStoreContext } from '../../utils/GlobalState';\n\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n\n    const [state, dispatch] = useStoreContext();\n\n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART });\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        state.cart.forEach(item => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n        };\n\n        if (!state.cart.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n\n    \n    if (!state.cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span\n                    role=\"img\"\n                    aria-label=\"trash\">🛒</span>\n            </div>\n        );\n    }\n    return (\n        <div className=\"cart\">\n            <div className=\"close\" onClick={toggleCart}>Close</div>\n            <h2>Flower Cart</h2>\n            {state.cart.length ? (\n                <div>\n                    {state.cart.map(item => (\n                        <CartItem key={item._id} item={item} />\n                    ))}\n                    <div className=\"flex-row space-between\">\n                        <strong>Total: ${calculateTotal()}</strong>\n                        <Link to=\"/cart\">\n                            <button>\n                                Checkout\n                            </button>\n                        </Link>\n                    </div>\n                </div>\n            ) : (\n                <h3>\n                    <span role=\"img\" aria-label=\"shocked\">\n                        😱\n                    </span>\n                    No items have been added to the cart!\n                </h3>\n            )}\n        </div>\n    );\n};\nexport default Cart;","import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\nimport Cart from '../components/Cart';\n\n// indexedDB\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Detail() {\n\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to cart</button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)} onClick={removeFromCart}>\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/\">\n              Products\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/\">\n              Products\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">💐</span>\n          The Flower Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../utils/actions\";\nimport { idbPromise } from \"../utils/helpers\";\nimport CartItem from '../components/CartItem';\nimport Auth from '../utils/auth';\nimport '../components/Cart/style.css';\n\nimport { useStoreContext } from '../utils/GlobalState';\n\nimport { QUERY_CHECKOUT } from '../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst CartPage = () => {\n\n    const [state, dispatch] = useStoreContext();\n\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART });\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        state.cart.forEach(item => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n        const productIds = [];\n\n        state.cart.forEach((item) => {\n            for (let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id);\n            }\n        });\n\n        getCheckout({\n            variables: { products: productIds }\n        });\n    }\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n        };\n\n        if (!state.cart.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n\n    // for checkout\n    useEffect(() => {\n        if (data) {\n            stripePromise.then((res) => {\n                res.redirectToCheckout({ sessionId: data.checkout.session });\n            });\n        }\n    }, [data]);\n\n\n    return (\n        <div className=\"\">\n            <h2>Shopping Cart</h2>\n            {state.cart.length ? (\n                <div>\n                    {state.cart.map(item => (\n                        <CartItem key={item._id} item={item} />\n                    ))}\n                    <div className=\"flex-row space-between\">\n                        <strong>Total: ${calculateTotal()}</strong>\n                        {\n                            Auth.loggedIn() ?\n                                <button onClick={submitCheckout}>\n                                    Checkout\n                                </button>\n                                :\n                                <span>(log in to check out)</span>\n                        }\n                    </div>\n                </div>\n            ) : (\n                <h3>\n                    <span role=\"img\" aria-label=\"shocked\">\n                        😱\n                    </span>\n                    You haven't added anything to your cart yet!\n                </h3>\n            )}\n        </div>\n    );\n};\n\nexport default CartPage;","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map(item => item._id);\n      \n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n    \n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n        \n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>\n          Thank you for your purchase!\n        </h2>\n        <h2>\n          You will now be redirected to the home page\n        </h2>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport CartPage from './pages/Cart';\nimport { StoreProvider } from \"./utils/GlobalState\";\nimport Success from \"./pages/Success\";\nimport OrderHistory from './pages/OrderHistory';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/cart\" component={CartPage} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";"],"sourceRoot":""}